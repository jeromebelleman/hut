.TH "HUT" "1" "June 2016" "" ""
.hy
.SH NAME
.PP
hut \- a Kibana dashboard template tool
.SH SYNOPSIS
.PP
\f[B]hut\f[] [\-h] [\-f] \f[I]DIRECTORY\f[] \f[I]OUTPUT\f[]
.SH DESCRIPTION
.PP
Generates a Kibana JSON file called \f[I]OUTPUT\f[] from a
\f[B]template.json\f[] file in \f[I]DIRECTORY\f[].
Available options are:
.TP
.B \f[B]\-h\f[], \f[B]\-\-help\f[]
Show a help message and exit.
.RS
.RE
.TP
.B \f[B]\-f\f[], \f[B]\-\-force\f[]
Write the JSON file even if the schema is invalid.
Without this option, hut refuses to write the file.
Either way, an error message describing the problem is be printed.
.RS
.RE
.SH TWIGS
.PP
Hut comes with a Python module offering convenience functions.
You need to import the \f[B]twigs\f[] module at the top of your
\f[B]template.json\f[] as follows:
.IP
.nf
\f[C]
<%!\ import\ twigs\ %>
\f[]
.fi
.PP
Functions from the \f[B]twigs\f[] module are for instance called as
follows:
.IP
.nf
\f[C]
[...]
"span":\ 4,
"title":\ "LSF",
"content":\ "${twigs.include(\[aq]lsf.md\[aq])}",
"type":\ "text"
[...]
\f[]
.fi
.PP
The following functions are available:
.TP
.B now()
Returns a human\-readable string of the current time.
This is for instance useful to display last change times in dashboards.
.RS
.RE
.TP
.B include(path)
Returns the contents of the file at \f[B]path\f[], replacing
\f[B]\\n\f[] by \f[B]\\\\n\f[] to make it fit into a single line
suitable for JSON.
This is for instance useful to include Markdown contents.
.RS
.RE
.TP
.B links(path)
Adds a compact panel with links included from the file at \f[B]path\f[].
This supports HTML entities so links may be
e.g.\ \f[C]&bull;\f[]\-separated.
.RS
.RE
.TP
.B pulldowns(enable=True)
Sets up the display for queries and filters, or disable them.
.RS
.RE
.TP
.B nav(enable=True)
Sets up the timepicker menu, or disable it.
.RS
.RE
.TP
.B loader()
Sets up save and load menus.
.RS
.RE
.PP
Additionally, the \f[B]twigs\f[] module offers the \f[B]colours\f[]
list, which offers the 56\ distinct shades which Kibana normally
provides for queries.
You can define other functions and attributes in \f[B]template.json\f[]
itself, for instance at the start of the file, and call them anywhere
else in the template:
.IP
.nf
\f[C]
<%
def\ foo():
\ \ \ \ return\ \[aq]Foo\[aq]
%>

{
\ \ "title":\ "${foo()}\ Monitoring\ Page"
}
\f[]
.fi
.SH DASHBOARD DIRECTORY
.PP
Hut expects a \f[I]DIRECTORY\f[] containing a file called
\f[B]template.json\f[], which is typically a Mako template
(\f[C]http://www.makotemplates.org\f[]).
When run, it moves into \f[I]DIRECTORY\f[] such that any resource
referred to from the template is expected to be in the current
\f[I]DIRECTORY\f[].
For instance, consider a \f[I]DIRECTORY\f[] \f[B]home\f[] containing
\f[B]template.json\f[] and \f[B]lsf.md\f[].
This will create a \f[B]text\f[] panel including the contents of
\f[B]lsf.md\f[] with the \f[B]include()\f[] function which only needs
its filename as path:
.IP
.nf
\f[C]
[...]
"span":\ 4,
"title":\ "LSF",
"content":\ "${twigs.include(\[aq]lsf.md\[aq])}",
"type":\ "text"
[...]
\f[]
.fi
.SH DASHBOARD SCHEMA
.PP
The Kibana dashboard schema is documented in
\f[C]https://www.elastic.co/guide/en/kibana/3.0/_dashboard_schema.html\f[]
but you may want to start from an existing one on Kibana, export it to a
JSON file and work from there.
In a nutshell, there is
.IP \[bu] 2
a title
.IP \[bu] 2
services (for defining queries and filters)
.IP \[bu] 2
a list of rows, each comprising a list of panels
.IP \[bu] 2
index settings
.IP \[bu] 2
pulldowns (for displaying queries and filters)
.IP \[bu] 2
some navigation (e.g.\ the timepicker)
.IP \[bu] 2
a loader
.IP \[bu] 2
a style (light or dark)
.PP
You can remove keys and count on default values.
You may then want to load your JSON into Kibana, export the schema again
and compare to see what those defaults are.
.PP
The JSON expected by Kibana follows fairly strict rules.
For instance, items in lists and dictionaries are comma\-separated but
the last item must not be followed with a comma.
In a loop, this can be handled as follows:
.IP
.nf
\f[C]
<%\ i\ =\ 0\ %>

%\ for\ queue\ in\ queues:

"${i}":\ {
\ \ "id":\ ${i},
\ \ "color":\ "${twigs.colours[i]}",
\ \ "query":\ "${queue}\ AND\ status:PEND"
},
<%\ i\ +=\ 1\ %>

"${i}":\ {
\ \ "id":\ ${i},
\ \ "color":\ "${twigs.colours[i]}",
\ \ "query":\ "${queue}\ AND\ status:RUN"
},
<%\ i\ +=\ 1\ %>

"${i}":\ {
\ \ "id":\ ${i},
\ \ "color":\ "${twigs.colours[i]}",
\ \ "query":\ "${queue}\ AND\ status:PSUSP"
}${\[aq],\[aq]\ if\ i\ <\ len(queues)\ *\ 3\ \-\ 1\ else\ \[aq]\[aq]}
<%\ i\ +=\ 1\ %>

%\ endfor
\f[]
.fi
.PP
Note that you can use \f[B]<% print \[aq]blah\[aq] %>\f[] for printing
to stdout.
.SH WRITING MANY DASHBOARDS
.PP
You can generate many similar dashboards from a single template, as an
alternative to templated and scripted dashboards
(\f[C]https://www.elastic.co/guide/en/kibana/3.0/templated\-and\-scripted\-dashboards.html\f[]),
which don\[aq]t always support all types of values well.
One approach involves writing a generic template in \f[I]DIRECTORY\f[],
making as many symlinks as variations to this \f[I]DIRECTORY\f[], each
with a meaningful name (e.g.\ \f[B]lsf\-grid\-alice\f[]), and resolve
the variations from this name (e.g.\ \f[B]alice\f[]) for instance with:
.IP
.nf
\f[C]
<%
import\ sys,\ os
variation\ =\ os.path.basename(sys.argv[1].rstrip(\[aq]/\[aq])).split(\[aq]\-\[aq])[\-1]
%>
\f[]
.fi
.SH AUTHORS
Irina Grigorescu, Jérôme Belleman.
